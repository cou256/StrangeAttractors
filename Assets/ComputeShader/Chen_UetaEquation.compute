#pragma kernel Calculate
#include "UnityCG.cginc"
#include "../Cginc/Transform.cginc"

struct TransformStruct {
	float3 translate;
	float3 rotation;
	float3 scale;
	float sumTime;
	float speed;
};

RWStructuredBuffer<TransformStruct> _TransformBuff;
float _A, _B, _C;
float _DeltaTime;

float dx(float t, float3 v) {
	return _A * (v.y - v.x);
}
float dy(float t, float3 v) {
	return -v.x * v.z + (_C - _A) * v.x + _C * v.y;
}
float dz(float t, float3 v) {
	return v.x * v.y - _B * v.z;
}
float3 RungeKutta(float dt, float t, float3 iv){
	float3 k0, k1, k2, k3;
	k0.x = dx(t, iv);
	k0.y = dy(t, iv);
	k0.z = dz(t, iv);
	k0 *= dt;

	float t0 = t + dt;
	float t1 = t0 / 2.0;

	float3 _k0 = iv + k0 / 2.0;
	k1.x = dx(t1, _k0);
	k1.y = dy(t1, _k0);
	k1.z = dz(t1, _k0);
	k1 *= dt;

	float3 _k1 = iv + k1 / 2.0;
	k2.x = dx(t1, _k1);
	k2.y = dy(t1, _k1);
	k2.z = dz(t1, _k1);
	k2 *= dt;

	float3 _k2 = iv + k2;
	k3.x = dx(t0, _k2);
	k3.y = dy(t0, _k2);
	k3.z = dz(t0, _k2);
	k3 *= dt;
	return (k0 + 2.0 * k1 + 2.0 * k2 + k3) / 6.0;
}
[numthreads(8, 8, 1)]
void Calculate(uint3 id : SV_DispatchThreadID) {
	TransformStruct tb = _TransformBuff[id.x];
	float dt = _DeltaTime * tb.speed;
	_TransformBuff[id.x].translate += RungeKutta(dt, tb.sumTime, tb.translate);
	_TransformBuff[id.x].sumTime += dt;
}